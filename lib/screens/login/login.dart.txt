import 'package:admin/services/auth2.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

class LoginPage extends StatefulWidget {
  @override
  _LoginPageState createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  FocusNode textFocusNodeEmail = FocusNode();
  FocusNode textFocusNodePassword = FocusNode();
  bool _isEditingEmail = false;
  TextEditingController emailController = TextEditingController();
  TextEditingController passwordController = TextEditingController();

  bool _isRegistering;

  @override
  void initState() {
    emailController = TextEditingController();
    emailController.text = '';
    textFocusNodeEmail = FocusNode();
    super.initState();
  }

  String _validateEmail(String value) {
    value = value.trim();

    if (emailController.text.isNotEmpty) {
      if (value.isEmpty) {
        return 'Email can\'t be empty';
      } else if (!value.contains(RegExp(
          r"^[a-zA-Z0-9.a-zA-Z0-9.!#$%&'*+-/=?^_`{|}~]+@[a-zA-Z0-9]+\.[a-zA-Z]+"))) {
        return 'Enter a correct email address';
      }
    }

    return null;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: Container(
          margin: EdgeInsets.symmetric(horizontal: 20, vertical: 80),
          padding: EdgeInsets.symmetric(horizontal: 20, vertical: 80),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                'Login',
                style: TextStyle(fontSize: 20),
              ),
              _emailForm(),
              _passwordForm(),
              _button(),
              _buttonRegister(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _emailForm() {
    return TextField(
      focusNode: textFocusNodeEmail,
      keyboardType: TextInputType.emailAddress,
      textInputAction: TextInputAction.next,
      controller: emailController,
      autofocus: false,
      onChanged: (value) {
        setState(() {
          _isEditingEmail = true;
        });
      },
      onSubmitted: (value) {
        textFocusNodeEmail.unfocus();
        FocusScope.of(context).requestFocus(textFocusNodePassword);
      },
      style: TextStyle(color: Colors.black),
      decoration: InputDecoration(
        border: new OutlineInputBorder(
          borderRadius: BorderRadius.circular(10),
          borderSide: BorderSide(
            color: Colors.blueGrey[800],
            width: 3,
          ),
        ),
        filled: true,
        hintStyle: new TextStyle(
          color: Colors.blueGrey[300],
        ),
        hintText: "Email",
        fillColor: Colors.white,
        errorText:
            _isEditingEmail ? _validateEmail(emailController.text) : null,
        errorStyle: TextStyle(
          fontSize: 12,
          color: Colors.redAccent,
        ),
      ),
    );
  }

  Widget _passwordForm() {
    return TextField(
      controller: passwordController,
      decoration: InputDecoration(hintText: ('Password')),
    );
  }

  Widget _button() {
    return TextButton(
      style: TextButton.styleFrom(
        primary: Colors.blueGrey.shade800,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(15),
        ),
      ),
      onPressed: () async {
        _isRegistering = false;

        await signInWithEmailPassword(
                emailController.text, passwordController.text)
            .then((result) {
          if (result != null) {
            /*setState(() {
              loginStatus = 'You have registered successfully';
              loginStringColor = Colors.green;
            });*/
            print(result);
          }
        }).catchError((error) {
          print('Registration Error: $error');
          /*setState(() {
            loginStatus = 'Error occured while registering';
            loginStringColor = Colors.red;
          });*/
        });

        setState(() {
          _isRegistering = false;
        });
      },
      child: Padding(
        padding: EdgeInsets.only(
          top: 15.0,
          bottom: 15.0,
        ),
        child: _isRegistering
            ? SizedBox(
                height: 16,
                width: 16,
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                  valueColor: new AlwaysStoppedAnimation<Color>(
                    Colors.white,
                  ),
                ),
              )
            : Text(
                'Sign up',
                style: TextStyle(
                  fontSize: 14,
                  color: Colors.white,
                ),
              ),
      ),
    );
  }

  _buttonRegister() {
    return RaisedButton(
      child: Text('Registrarse'),
      onPressed: () {
        Navigator.pushReplacementNamed(context, 'registerpage');
      },
    );
  }
}
